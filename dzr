#!/bin/sh

FETCH=${FETCH:-curl -s} # FETCH="wget -q -O -" or FETCH="curl -s -k"
PLAYER=${PLAYER:-'mpv -'} # PLAYER="ffplay -"

# extraction + warning by charleywright, see: https://github.com/yne/dzr/issues/11
unscramble(){ printf "${8}${16}${7}${15}${6}${14}${5}${13}${4}${12}${3}${11}${2}${10}${1}${9}";}
if [ -z "$DZR_CBC" ]; then
	command -v $(echo "$FETCH" | cut -f 1 -d " ") >/dev/null || { echo "key extraction require $FETCH" 1>&2 ; exit 1 ;}
	printf "Add the following to your shell profile e.g. ~/.profile or ~/.zshrc:\n" >&2
	APP_WEB=$($FETCH -L deezer.com/en/channels/explore | sed -n 's/.*src="\([^"]*app-web[^"]*\).*/\1/p' | xargs $FETCH -L)
	TMP_CBC=$(echo "$APP_WEB"  | tr ,_ '\n'  | sed -n 's/.*\(%5B0x..%2C.\{39\}%2C0x..%5D\).*/\1/p' | sed 's/%../\n/g' | xargs printf '\\%o ')
	export DZR_CBC=$(unscramble $TMP_CBC);
	printf "    export DZR_CBC=$DZR_CBC" >&2
	[ "-$@" = "-!" ] && printf '%s' "$DZR_CBC" && exit
	sleep 2 # give time to read the warning
	echo
fi

# dependencies check, see: https://github.com/yne/dzr/issues/12
for c in jq curl dialog openssl $(echo "$PLAYER" | cut -f 1 -d " "); do
	command -v $c >/dev/null || { echo "$c is required" 1>&2 ; UNMET_DEPENDENCIES=1;}
done
[ -n "$UNMET_DEPENDENCIES" ] && exit 1;

# main
API="api.deezer.com"
DLG_LIST="dialog --keep-tite --output-fd 1 --no-tags --menu $1: 0 0 0"
DLG_TEXT="dialog --keep-tite --output-fd 1 --inputbox $1: 0 0"
FMT_LIST='(if .data then .data else .tracks.data end)[]|("/"+.type+"/"+(.id|tostring), (.title+.name+" "+.artist.name|gsub("\\x22";"")))'
FMT_TRKS='"/track/"+([(if .data then .data else .tracks.data end)[]|select(.type=="track")|.id]|@csv)'
FMT_FUNC='s@[,?].*@@;s@[^a-zA-Z0-9]\{1,\}@_@g;s@[0-9,]\{1,\}@0@g;s@_\{1,\}$@@'
get()          { $DLG_LIST /search/track?q= Track /search/artist?q= Artist /search/album?q= Album /search/playlist?q= Playlist /search/user?q= User /user/0 UserID /search/radio?q= Radio /radio Radios /genre Genre;}
get_genre_0()  { $DLG_LIST $url/radios Radios $url/artists Artists ;}
get_radio_0()  { $DLG_LIST $url/tracks Tracks $url/fans Fans ;}
get_album_0()  { $DLG_LIST $url/tracks Tracks $url/fans Fans ;}
get_user_0()   { $DLG_LIST $url/charts Charts $url/albums Albums $url/playlists Playlists $url/flow Flow $url/tracks Tracks $url/artists Artists ;}
get_artist_0() { $DLG_LIST $url/top?limit=50 Top50 $url/albums Albums $url/fans Fans $url/related Related $url/radio Radio $url/playlists Playlists ;}
get_default()  { eval $DLG_LIST $($FETCH -H "Accept-Language: $LANG" "$API$1" | jq "$FMT_LIST") ;} # TODO: .next "'▸' 'play all /track/' '⇄' 'shuf all /track/'" 
get_track_0()  { # support multi-ids /track/1,2,3 for token reuse
	[ "$REQUEST_METHOD" = "GET" ] && http audio/mpeg
	$0-url $@ | ${SHUF:-cat} | while read url id; do
		$FETCH "$url" | $0-dec $id | eval ${PLAYER} || break # stop if Ctrl+C : $? = 4
	done
}

url="${1:-$QUERY_STRING}"
FUNC=$(echo "get_$url" | sed "$FMT_FUNC")
type $FUNC 1>/dev/null 2>/dev/null || FUNC=get_default
if [ "$REQUEST_METHOD" = "GET" ] ; then
	PLAYER=cat; # env >&2
	case $HTTP_ACCEPT in *text/html*) DLG_LIST=href; ;; *) DLG_LIST=m3u ;; esac
	http() { echo "Content-Type: ${1:-text/html; charset=utf-8}" ; echo ; }
	href() { http ; echo '<ul>' ; while [ "$#" -gt 1 ]; do echo "<li><a href=?$1>$2</a></li>" ; shift 2; done; echo '</ul>' ;}
	m3u()  { http application/vnd.apple.mpegurl ; echo '#EXTM3U' ; while [ "$#" -gt 1 ]; do echo "#EXTINF:0, $2"; echo "http://$REMOTE_ADDR:$SERVER_PORT$SCRIPT_NAME?$1" ; shift 2; done; }
	case $url in *=|*/0) http; echo '<form onsubmit="location.search+=q.value;return false"><input name=q></form>'; exit ;; esac
	$FUNC $url
else
	case $url in *=|*/0) url="$url$($DLG_TEXT ''|jq -rR '.|@uri')" ;; esac
	$0 $($FUNC $url)
fi
